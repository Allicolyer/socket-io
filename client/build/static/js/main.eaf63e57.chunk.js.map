{"version":3,"sources":["components/Message.js","components/Modal.js","components/Transcript.js","components/Chatroom.js","utils/api-call.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Message","name","message","isCurrentUser","className","Modal","onClose","e","props","this","show","id","header","children","onClick","React","Component","Transcript","context","roomOptions","roomNames","Object","keys","defaultRoom","Chatroom","showUsernameModal","event","setState","state","showRoomModal","enterUsername","preventDefault","room","messages","handleNameChange","bind","handleMessageChange","handleSubmit","changeRoom","nextRoomName","value","previousRoomName","socket","emit","initSocket","on","isAIUser","addMessage","playAudio","target","console","log","updateContext","replace","trim","sendAIMessage","fetch","method","headers","Accept","body","JSON","stringify","model_size","top_p","temperature","max_time","then","response","json","myJson","longest","sentences","forEach","sentence","length","res","file","Audio","play","onSubmit","type","onChange","options","placeholder","map","m","i","key","Layout","io","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.eaf63e57.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Message = ({ name, message, isCurrentUser }) => {\n  return (\n    <li>\n      <span className={isCurrentUser ? \"name current-user\" : \"name\"}>\n        {name}:{\" \"}\n      </span>\n      {message}\n    </li>\n  );\n};\n","import React from \"react\";\n\nexport default class Modal extends React.Component {\n  onClose = e => {\n    this.props.onClose && this.props.onClose(e);\n  };\n\n  render() {\n    if (!this.props.show) {\n      return null;\n    }\n    return (\n      <div className=\"modal-container\">\n        <div className=\"modal\" id=\"modal\">\n          <h2>{this.props.header}</h2>\n          <div className=\"content\">{this.props.children}</div>\n          <div className=\"actions\">\n            <button className=\"toggle-button\" onClick={this.onClose}>\n              close\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default class Transcript extends React.Component {\n  render() {\n    return (\n      <div className=\"transcript\">\n        {this.props.context && <h2> Transcript</h2>}\n        <div>{this.props.context}</div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Message } from \"./Message\";\nimport Modal from \"./Modal\";\nimport Transcript from \"./Transcript\";\n\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nimport { apiCall } from \"../utils/api-call\";\n\nconst roomOptions = {\n  'Under the Sea': \"Under the sea, under the sea, everything's better down where it's wetter, take it from me!\",\n  'Zork': \"TBD\",\n  'Pandemic': \"Make sure you stay socially isolated!\",\n  'Misc': \"\"\n}\n\nconst roomNames = Object.keys(roomOptions)\n\nconst defaultRoom = roomNames[3];\n\nexport class Chatroom extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      room: defaultRoom,\n      name: \"guest\",\n      message: \"\",\n      messages: [],\n      context: \"\",\n      showUsernameModal: true,\n      showRoomModal: false\n    };\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleMessageChange = this.handleMessageChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.changeRoom = this.changeRoom.bind(this);\n  }\n\n  changeRoom(event) {\n    let nextRoomName = event.value;\n    let previousRoomName = this.state.room;\n    this.setState({room: nextRoomName, context: roomOptions[nextRoomName], messages:[]},\n      function () {\n        this.props.socket.emit(\"room\", previousRoomName, nextRoomName);\n      }\n    );\n  }\n\n  componentDidMount() {\n    const { socket } = this.props;\n    this.initSocket(socket);\n  }\n\n  initSocket(socket) {\n    // receive message code\n    socket.on(\"chat message\", (name, message, isCurrentUser, isAIUser) => {\n      this.addMessage(name, message, isCurrentUser, isAIUser);\n      if (isCurrentUser) {\n        this.playAudio(\"./audio/outgoing-message.wav\");\n      } else {\n        this.playAudio(\"./audio/incoming-message.mp3\");\n      }\n    });\n  }\n\n  handleNameChange(event) {\n    this.setState({ name: event.target.value });\n  }\n\n  handleMessageChange(event) {\n    this.setState({ message: event.target.value });\n  }\n\n  addMessage(name, message, isCurrentUser, isAIUser) {\n    console.log(\"I added\");\n\n    //Keep track of all message text, including punctuation\n    this.updateContext(message);\n    console.log(isAIUser);\n    if (isAIUser) {\n      //clean it up before adding it to the messages state\n      message = message\n        .replace(/[\\r\\n]/g, \" \")\n        .replace(/[\\/#.,;!?$%\\^&\\*:{}=\\_`~()]/g, \" \")\n        .replace(/[\"]/g, \"<-\")\n        .replace(/\\s\\s+/g, \" \")\n        .trim();\n\n      console.log(message);\n    }\n    // adding some message to our state\n    this.setState({\n      messages: [\n        ...this.state.messages,\n        { name: name, message: message, isCurrentUser: isCurrentUser }\n      ]\n    });\n\n    // Send an AI message\n    if (isCurrentUser) {\n      this.sendAIMessage();\n    }\n  }\n\n  updateContext(message) {\n    this.setState({ context: `${this.state.context} ${message}` });\n  }\n\n  sendAIMessage() {\n    apiCall(this.state.context).then(res =>\n      this.props.socket.emit(\"AI message\", `Robot from ${this.state.name}`, res, this.state.room)\n    );\n  }\n\n  playAudio(file) {\n    let audio = new Audio(file);\n    audio.play();\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.socket.emit(\"chat message\", this.state.name, this.state.message, this.state.room);\n    this.setState({\n      message: \"\"\n    });\n  }\n\n  showUsernameModal = event => {\n    this.setState({\n      showUsernameModal: !this.state.showUsernameModal\n    });\n  };\n\n  showRoomModal = event => {\n    this.setState({\n      showRoomModal: !this.state.showRoomModal\n    });\n  };\n\n\n  enterUsername = event => {\n    event.preventDefault();\n    this.showUsernameModal();\n  };\n\n  render() {\n    return (\n      <div>\n        <Modal onClose={this.showUsernameModal} show={this.state.showUsernameModal} header=\"Enter Username\">\n          <form onSubmit={this.enterUsername}>\n            <input\n              id=\"name\"\n              type=\"text\"\n              value={this.state.name}\n              onChange={this.handleNameChange}\n            />\n          </form>\n        </Modal>\n        <Modal onClose={this.showRoomModal} show={this.state.showRoomModal} header=\"Switch Room\">\n            <Dropdown options={roomNames} onChange={this.changeRoom} value={defaultRoom} placeholder=\"Select a Room\" />;\n        </Modal>\n        <button className=\"modal-button\" onClick={this.showUsernameModal}>\n          Change Username\n        </button>\n         <button className=\"modal-button\" onClick={this.showRoomModal}>\n          Change Room\n        </button>\n        <h1>{this.state.room}</h1>\n        <div className=\"chatroom-container\">\n          <div className=\"chat-window\">\n            <ul id=\"messages\">\n              {this.state.messages.map((m, i) => (\n                <Message\n                  key={i}\n                  name={m.name}\n                  message={m.message}\n                  isCurrentUser={m.isCurrentUser}\n                />\n              ))}\n            </ul>\n            <form onSubmit={this.handleSubmit} className=\"message-form\">\n              <input\n                id=\"message\"\n                type=\"text\"\n                value={this.state.message}\n                onChange={this.handleMessageChange}\n              />\n              <button>Send</button>\n            </form>\n          </div>\n          <div className=\"transcript-window\">\n            <Transcript context={this.state.context} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","export const apiCall = context => {\n  return fetch(\"https://transformer.huggingface.co/autocomplete/gpt2/large\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      context: context,\n      model_size: \"gpt2/large\",\n      top_p: 0.9,\n      temperature: 1,\n      max_time: 1\n    })\n  })\n    .then(response => {\n      return response.json();\n    })\n    .then(myJson => {\n      // picks the longest response out of the three response messages\n      let longest = \"\";\n      myJson.sentences.forEach(sentence => {\n        if (sentence.value.length > longest.length) {\n          longest = sentence.value;\n        }\n      });\n      \n      return longest;\n    });\n};\n","import React from \"react\";\nimport io from \"socket.io-client\";\nimport { Chatroom } from \"./Chatroom\";\n\nconst socketUrl = \"http://localhost:4000/\";\nexport class Layout extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      socket: null\n    };\n  }\n\n  componentWillMount() {\n    this.initSocket();\n  }\n\n  initSocket = () => {\n    const socket = io(socketUrl);\n\n    socket.on(\"connect\", () => {\n      console.log(\"Connected\");\n    });\n\n    this.setState({ socket });\n  };\n\n  render() {\n    const { socket } = this.state;\n    return <Chatroom socket={socket} />;\n  }\n}\n","import React from \"react\";\nimport \"./style/main.css\";\nimport { Layout } from \"./components/Layout.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"></header>\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}