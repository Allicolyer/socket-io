{"version":3,"sources":["components/Message.js","components/Modal.js","components/Transcript.js","components/Chatroom.js","utils/api-call.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Message","name","message","isCurrentUser","className","Modal","onClose","e","props","this","show","id","children","onClick","React","Component","Transcript","context","Chatroom","showModal","event","setState","state","enterUsername","preventDefault","room","messages","handleNameChange","bind","handleMessageChange","handleSubmit","toggleRoom","console","log","socket","emit","initSocket","on","isAIUser","addMessage","playAudio","target","value","updateContext","replace","trim","sendAIMessage","fetch","method","headers","Accept","body","JSON","stringify","model_size","top_p","temperature","max_time","then","response","json","myJson","longest","sentences","forEach","sentence","length","res","file","Audio","play","onSubmit","type","onChange","map","m","i","key","Layout","io","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c36dbbed.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Message = ({ name, message, isCurrentUser }) => {\n  return (\n    <li>\n      <span className={isCurrentUser ? \"name current-user\" : \"name\"}>\n        {name}:{\" \"}\n      </span>\n      {message}\n    </li>\n  );\n};\n","import React from \"react\";\n\nexport default class Modal extends React.Component {\n  onClose = e => {\n    this.props.onClose && this.props.onClose(e);\n  };\n\n  render() {\n    if (!this.props.show) {\n      return null;\n    }\n    return (\n      <div className=\"modal-container\">\n        <div className=\"modal\" id=\"modal\">\n          <h2>Select a Username</h2>\n          <div className=\"content\">{this.props.children}</div>\n          <div className=\"actions\">\n            <button className=\"toggle-button\" onClick={this.onClose}>\n              close\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default class Transcript extends React.Component {\n  render() {\n    return (\n      <div className=\"transcript\">\n        {this.props.context && <h2> Transcript</h2>}\n        <div>{this.props.context}</div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Message } from \"./Message\";\nimport Modal from \"./Modal\";\nimport Transcript from \"./Transcript\";\n\nimport { apiCall } from \"../utils/api-call\";\n\nexport class Chatroom extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      room: \"Default Room\",\n      name: \"guest\",\n      message: \"\",\n      messages: [],\n      context: \"\",\n      show: true\n    };\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleMessageChange = this.handleMessageChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.toggleRoom = this.toggleRoom.bind(this);\n  }\n\n  toggleRoom(event) {\n    console.log(\"toggleRoom()\");\n    this.setState({room: (this.state.room == \"Default Room\") ? \"Room 1\" : \"Default Room\"},\n      function () {\n        this.props.socket.emit(\"room\", (this.state.room == \"Default Room\") ? \"Room 1\" : \"Default Room\", this.state.room);\n      }\n    );\n  }\n\n  componentDidMount() {\n    const { socket } = this.props;\n    this.initSocket(socket);\n  }\n\n  initSocket(socket) {\n    // receive message code\n    socket.on(\"chat message\", (name, message, isCurrentUser, isAIUser) => {\n      this.addMessage(name, message, isCurrentUser, isAIUser);\n      if (isCurrentUser) {\n        this.playAudio(\"./audio/outgoing-message.wav\");\n      } else {\n        this.playAudio(\"./audio/incoming-message.mp3\");\n      }\n    });\n  }\n\n  handleNameChange(event) {\n    this.setState({ name: event.target.value });\n  }\n\n  handleMessageChange(event) {\n    this.setState({ message: event.target.value });\n  }\n\n  addMessage(name, message, isCurrentUser, isAIUser) {\n    console.log(\"I added\");\n\n    //Keep track of all message text, including punctuation\n    this.updateContext(message);\n    console.log(isAIUser);\n    if (isAIUser) {\n      //clean it up before adding it to the messages state\n      message = message\n        .replace(/[\\r\\n]/g, \" \")\n        .replace(/[\\/#.,;!?$%\\^&\\*:{}=\\_`~()]/g, \" \")\n        .replace(/[\"]/g, \"<-\")\n        .replace(/\\s\\s+/g, \" \")\n        .trim();\n\n      console.log(message);\n    }\n    // adding some message to our state\n    this.setState({\n      messages: [\n        ...this.state.messages,\n        { name: name, message: message, isCurrentUser: isCurrentUser }\n      ]\n    });\n\n    // Send an AI message\n    if (isCurrentUser) {\n      this.sendAIMessage();\n    }\n  }\n\n  updateContext(message) {\n    this.setState({ context: `${this.state.context} ${message}` });\n  }\n\n  sendAIMessage() {\n    apiCall(this.state.context).then(res =>\n      this.props.socket.emit(\"AI message\", `Robot from ${this.state.name}`, res, this.state.room)\n    );\n  }\n\n  playAudio(file) {\n    let audio = new Audio(file);\n    audio.play();\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.socket.emit(\"chat message\", this.state.name, this.state.message, this.state.room);\n    this.setState({\n      message: \"\"\n    });\n  }\n\n  showModal = event => {\n    this.setState({\n      show: !this.state.show\n    });\n  };\n\n  enterUsername = event => {\n    event.preventDefault();\n    this.showModal();\n  };\n\n  render() {\n    return (\n      <div>\n        <Modal onClose={this.showModal} show={this.state.show}>\n          <form onSubmit={this.enterUsername}>\n            <input\n              id=\"name\"\n              type=\"text\"\n              value={this.state.name}\n              onChange={this.handleNameChange}\n            />\n          </form>\n        </Modal>\n        <button className=\"modal-button\" onClick={this.showModal}>\n          Change Username\n        </button>\n        <h1>{this.state.room}</h1>\n        <button onClick={this.toggleRoom}> Switch Room </button>\n        <div className=\"chatroom-container\">\n          <div className=\"chat-window\">\n            <ul id=\"messages\">\n              {this.state.messages.map((m, i) => (\n                <Message\n                  key={i}\n                  name={m.name}\n                  message={m.message}\n                  isCurrentUser={m.isCurrentUser}\n                />\n              ))}\n            </ul>\n            <form onSubmit={this.handleSubmit} className=\"message-form\">\n              <input\n                id=\"message\"\n                type=\"text\"\n                value={this.state.message}\n                onChange={this.handleMessageChange}\n              />\n              <button>Send</button>\n            </form>\n          </div>\n          <div className=\"transcript-window\">\n            <Transcript context={this.state.context} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","export const apiCall = context => {\n  return fetch(\"https://transformer.huggingface.co/autocomplete/gpt2/large\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      context: context,\n      model_size: \"gpt2/large\",\n      top_p: 0.9,\n      temperature: 1,\n      max_time: 1\n    })\n  })\n    .then(response => {\n      return response.json();\n    })\n    .then(myJson => {\n      // picks the longest response out of the three response messages\n      let longest = \"\";\n      myJson.sentences.forEach(sentence => {\n        if (sentence.value.length > longest.length) {\n          longest = sentence.value;\n        }\n      });\n      \n      return longest;\n    });\n};\n","import React from \"react\";\nimport io from \"socket.io-client\";\nimport { Chatroom } from \"./Chatroom\";\n\nconst socketUrl = \"/\";\nexport class Layout extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      socket: null\n    };\n  }\n\n  componentWillMount() {\n    this.initSocket();\n  }\n\n  initSocket = () => {\n    const socket = io(socketUrl);\n\n    socket.on(\"connect\", () => {\n      console.log(\"Connected\");\n    });\n\n    this.setState({ socket });\n  };\n\n  render() {\n    const { socket } = this.state;\n    return <Chatroom socket={socket} />;\n  }\n}\n","import React from \"react\";\nimport \"./style/main.css\";\nimport { Layout } from \"./components/Layout.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"></header>\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}